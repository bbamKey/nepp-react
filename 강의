### vscode 세팅
# vscode 확장에서 eslint, prettier 설치
# vscode 기본설정에서 default formatter를 prettier로 설정
# vscode 기본설정에서 format on save 체크

### react 설치
# npx create-react-app react-app
# npx은 npm의 상위버전
# package.json : 설정파일
# index.js : 시작점
# import에 상대경로가 없는건 라이브러리. package.json > dependencies
# 라이브러리는 node_modules에 있다.
# .gitignore에 추가하면 git으로 관리를 안하는 파일
# react는 single page application -> html은 하나지만 컴퍼넌트가 교체

###JSX
# === 비교
# && : true일 경우 실행
# || : falsy(거짓같은 값[false, 0, -0, null, undefined, NaN(Not a Number)])
# ?? : 널 병합 연산자 -> null, undefined


###component
# 클래스형과 함수형 두 가지가 있다. 클래스형은 이제 사용권장하지 않는다.
# 함수형 컴퍼너틑 state기능 및 라이프사이클 기능을 Hooks라는 기능이 추가되면서 함수형으로도 사용이 가능해졌다.
# props는 무조건 첫번째인자, 비구조할당을 주로 사용한다.


###component state
# 컴퍼넌트는 랜더링을 다시해야 바뀐 값이 반영된다
# Hooks 중에 하나인 useState를 사용하여 재렌더링을 한다.
# useState로 재렌덩이 되면서 Hooks로 선언된 변수가 아니면 초기화 된다


###js 원시타입, 참조타입 => 펼침연산자를 사용해야 참조타입 변수 복사 가능
# object에 같은 key값으로 데이터가 추가된다면 덮어써진다 
# const obj = { a: 1, b: 2, c: 2 };
# const nObj = { ...obj, b: 10 }; // {a:1, c:2, b:10}


###String Case
# onClick 카멜 : 리액트 함수 변수 등
# on_click 스네이크
# OnClick 파스칼 : 리액트 jsx 명 등
# ON_CLICK 

###useEffect
# return문이 clean up 이기때문에 early 리턴 사용불가
# async도 사용 불가
#
# 두번째 인자에 빈 배열을 넣으면
# 마운트될때 한번 실행
# 마운트해제될때 클린업 함수 한번 실행

###useReducer
# Redux 패턴으로 만는 Hook

###Redux
# 상태 관리 라이브러리
# UI action -> reduce -> Store 변화 -> 화면 변화

###useCallback
# 함수

###useMemo
# 값 변화

###useRef
# 랜더링이 되더라도 값이 변화되지 않음

###Custom Hook
# 공용js인데 Hook을 사용

#wapper : 한 가지 요소
#container : 여러가지 요소